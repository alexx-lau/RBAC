<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/4/24
 * Time: 11:30
 */

namespace app\common\controller;


use think\Controller;
use think\facade\Hook;
use app\service\GetRoleUrls;

/**
 * @desc 公共控制器类，处理公共业务逻辑
 * Class Common
 * @package app\common\controller
 */
class Common extends Controller {

    /**
     * @var string
     * @desc 表单验证令牌
     */
    protected $token = '';

    /**
     * @var string
     * @desc 跳回地址
     */
    protected $referUrl = '';

    /**
     * @var array
     * @desc 不参与控制的方法名
     */
    protected $ignore = [];

    /**
     * @desc 当前项目名称
     * @var null
     */
    protected $prefix = null;

    /**
     * @desc 通用初始化方法，用于处理表单令牌，返回地址定义，url检测等业务
     */
    protected function initialize() {
        $this->addUrlAutomatic();
		$this->ignore = config('keywords.ignore');
        $currentUrl = $this->request->url();
        $temp = explode('/', trim($currentUrl, '/'));
	    if(count($temp)  < 3) {
	    	$this->prefix = config('keywords.front_side');
	    } else {
	    	$this->prefix = $temp[2];
	    }
        if(!empty(session($this->prefix . 'userinfo'))) {
            if(empty(session($this->prefix . 'userinfo')['current_url']) || strtolower($this->prefix) != strtolower(session($this->prefix . 'userinfo')['current_url'])) {
                session($this->prefix . 'userinfo', null);
            }
        }
        session('prefix', $this->prefix);
        $this->assign('prefix', $this->prefix);
        parent::initialize(); // TODO: Change the autogenerated stub
        if(empty(session('token'))) {
            session('token', md5(time()));
        }
        $this->token = session('token');
        $this->assign('token', $this->token);
        if(!empty($this->request->post())) {
            if(empty($this->request->post()['token']) ||
                $this->request->post()['token'] != session('token')) {
                $this->error(config('prompt.invalid_token'));
            }
        }

        $url = $this->request->path();
        //访问后台管理页面
        if(false !== stripos($url, 'admin')) {
            if(empty(session($this->prefix . 'userinfo')) &&
                (false === stripos($this->request->path(), 'login')) &&
                (false === stripos($this->request->path(), 'register')) &&
                (false === stripos($this->request->path(), 'getValidCode'))) {
                $temp = explode('/', $url);
                $prefix = $temp[0];
                $this->redirect($prefix . '/User/login');
            }
        }
        $temp = $this->getUrlInfo($this->request->url());
        if($temp[count($temp) - 1] == 'public') {
        	$temp[count($temp) - 1] = 'index';
        }
        if(empty(session($temp[count($temp) - 1] . '_referer'))) {
            $referer = '';
            if(isset($_SERVER['HTTP_REFERER'])) {
                $referer = $_SERVER['HTTP_REFERER'];
            }
            $this->refererUrl = $referer;
            session($temp[count($temp) - 1] . '_referer', $this->refererUrl);
        }

        $this->assign('referer', session($temp[count($temp) - 1] .
            '_referer'));


        if(false === stripos($url, 'admin')) {
            $role = new GetRoleUrls();
            $ignore = \app\common\model\Url::getIgnoreUrls();
            $this->ignore = array_merge($this->ignore, $ignore);
            $temp = explode('/', $this->request->path());
            $suffix = $temp[count($temp) - 1];
            if(!empty(session($this->prefix . 'userinfo'))) {
                if((!in_array($suffix, $this->ignore) &&
                    session($this->prefix . 'userinfo')['type'] != 2)) {
                    $flag = 0;
                    if(false !== ($urls = $role->getRoleUrls($this->prefix))) {
                        foreach($urls as $k=>$v) {
                            if(false !== stripos(strtolower($this->request->url()),
                                    strtolower($v))) {
                                $flag = 1;
                                break;
                            }
                        }
                    }
                    if(empty($flag)) {
                        return $this->notFound();
                    }
                }
            } else {
                if(!in_array($suffix, $this->ignore)) {
                    return $this->notFound();
                }
            }
        }
    }

    /**
     * @desc 无访问权限时的跳转页面
     */
    public function notFound() {
        if(isset($_SERVER['HTTP_REFERER'])) {
            $this->assign('redirect', '../user/logout');
            $this->assign('referer', $_SERVER['HTTP_REFERER']);
        }
        $this->assign('title', config('title.not_found'));
        $this->assign('userinfo', session($this->prefix . 'userinfo'));
        echo  $this->fetch('common@common/not_found');
        exit();

    }

    /**
     * @desc 验证码
     */
    public function getValidCode() {
        $valid = new \validcode\ValidCode();
        $code = $valid->genImg();
        session('valid_code', $code);
    }

    /**
     * @desc 清除地址引用
     * @param string $arg
     * @return bool
     */
    protected function clearSession(string $arg) {
        if(empty($arg)) {
            return false;
        }
        $temp = $this->getUrlInfo($arg);
        if(count($temp) < 3) {
        	$temp[count($temp) - 1] = config('keywords.front_side');
        }
        session($temp[count($temp) - 1] . '_referer', null);
        return true;
    }

    /**
     * @desc 解析url地址
     * @param string $arg
     * @return array|bool
     */
    protected function getUrlInfo(string $arg) {
        if(empty($arg)) {
            return false;
        }
        if(false !== stripos($arg, '.html')) {
	        return explode('/', substr($arg, 0, -5));
        }
        return explode('/', trim($arg, '/'));
    }

    /**
     * @desc 记录日志
     * @param $filename
     * @param $content
     */
    public static function saveLogs($filename, $content) {
        file_put_contents($filename, $content . ' -- ' . date('Y-m-d H:i:s') . PHP_EOL, FILE_APPEND);
    }

    /**
     * @desc 通用注册方法,定义了一个钩子行为监听，用于记录注册失败情况
     * @param Request request
     * @return mixed
     */
    protected function register() {
        if(!empty($this->request->post())) {
            Hook::listen('beforeRegister');
            if(true !== ($result = $this->validate(
                    $this->request->post(),
                    '\app\admin\validate\CheckUser',
                    [],
                    true))) {
                $prompt = implode(',', $result);
                $this->error($prompt);
            }

            $param = $this->request->post();
            $param['current_url'] = $this->prefix;

            if(false !== $res = $this->model->addUser($param)) {
                return $res;
            }
            Hook::listen('registerFail');
            $this->error(config('prompt.register.failure'));
        }
    }

    /**
     * @desc 通用登录方法,定义了一个钩子行为监听，用于记录注册失败情况
     * @param Request request
     * @return mixed
     */
    protected function login() {
        if(!empty($this->request->post())) {
            Hook::listen('beforeLogin');
            if(empty(session('times'))) {
                session('times', 1);
            } else {
                $times = session('times');
                session('times', ++$times);
            }
            if(isset($this->request->post()['code'])) {
                if(true !== ($result = $this->validate(
                        $this->request->post(),
                        '\\app\\admin\\validate\\CheckUser.loginValid',
                        [],
                        true))) {
                    $prompt = implode(',', $result);
                    $this->error($prompt);
                }
            } else {
                if(true !== ($result = $this->validate(
                        $this->request->post(),
                        '\\app\\admin\\validate\\CheckUser.loginNormal',
                        [],
                        true))) {
                    $prompt = implode(',', $result);
                    $this->error($prompt);
                }
            }
            $param = $this->request->post();
            $param['current_url'] = $this->prefix;


            if(false !== ($res = $this->model->login($param))) {
               return $res;
            }
            Hook::listen('loginFail');
            $this->error(config('prompt.login_failure'));
        }
    }

    /**
     * @desc 通用登出方法,定义了一个钩子行为监听，用于记录注册失败情况
     */
    protected function logout() {

        Hook::listen('beforeLogout');
        if(!empty(session($this->prefix . 'userinfo'))) {
            session($this->prefix . 'userinfo', null);
        }
        Hook::listen('afterLogout');
    }

    private function addUrlAutomatic() {
        $url = new \app\service\SearchUrls();
        $url->insertUrlsAutomatic();
    }
}