<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/5/13
 * Time: 15:40
 */

namespace app\index\controller;


use app\common\controller\Common;
use app\common\model\User as UserModel;
use think\facade\Hook;

/**
 * Class User
 * @package app\index\controller
 * @desc 前端用户控制器，用于前端用户的相关业务逻辑
 */
class User extends Common {

    /**
     * @var null
     * @desc 关联模型对象
     */
    protected $model = null;

    /**
     * @desc 初始化方法
     */
    protected function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
        if(!($this->model instanceof UserModel)) {
            $this->model = new UserModel();
        }
    }

    /**
     * @desc 处理用户注册，定义了两个钩子行为监听，用于记录注册过程
     * @param \think\facade\Request::post()
     * @return mixed
     */
    public function register() {
//        if(empty(session($this->prefix . 'userinfo'))) {
//            return $this->notFound();
//        }
        $res = parent::register();
        switch($res) {
            case 1:
                Hook::listen('registerFail');
                $this->error(config('prompt.username_already_exist'));
                break;
            case 2:

                \app\service\Role::initUserRole(session('userinfo')['id']);
                Hook::listen('registerSuccess');
                $this->success(config('prompt.register_success'), 'index/website/index');
                break;
        }

        return $this->fetch();
    }

    /**
     * @desc 处理用户登录，定义了两个钩子行为监听，用于记录登录过程
     * @return mixed
     */
    public function login() {
        $res = parent::login();

        switch($res) {
            case 1:
                Hook::listen('loginFail');
                $this->error(config('prompt.invalid_username_or_password'));
                break;
            case 2:
                Hook::listen('loginSuccess');
                session('times', null);
                $this->success(config('prompt.login_success'), 'index/website/index');
                break;
        }
        $this->assign('times', session('times'));
        $this->assign('title', config('title.login'));
        return $this->fetch();
    }

    /**
     * @desc 处理用户登出
     */
    public function logout() {
        parent::logout();
        $this->redirect('index/user/login');
    }

    public function personalCenter() {
        if(empty(session($this->prefix.'userinfo'))) {
            if(!empty($this->referUrl)) {
                $this->redirect($this->referUrl);
            }
            $this->redirect('index/website/index');
        }
        return $this->fetch();
    }

    public function changePassword() {
        if(empty(session($this->prefix . 'userinfo'))) {
            if(!empty($this->referUrl)) {
                $this->redirect($this->referUrl);
            }
            $this->redirect('website/index');
        }
        if(!empty($this->request->post())) {
            if($result = $this->validate($this->request->post(),
                '\\admin\\User\\validate\\CheckUser.changePassword',
                [],
                true)) {
                $this->error(implode(',', $result));
            }
        }
    }
}